<?php

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Redirect;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\URL;
use Illuminate\Support\Facades\Hash;
use Illuminate\Database\Eloquent\SoftDeletes;
use App\Mail\SendMail;
use App\DriverDocument;
use App\Driver;
use Response;
use Mail;
use DB;
use App\Notification;

class NotificationController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    /*public function index()
    {           
          // $this->authorize('index', Driver::class);      
        try { 

               $data =array();
               return view('admin.notification.index', $data);
              
            } catch ( \Exception $e) {
                return Redirect::back()->with('msg',$e->getMessage())->with('color' , 'warning');
            }
    }*/

    public function create(){

          $this->authorize('create', Notification::class);
          /*
          $cities = DB::table('cities')->select('cities.id' , 'cities.name')
                                       ->join('drivers' , 'drivers.city' , '=' , 'cities.id')
                                       ->groupBy('cities.id')
                                       ->get();
          */
          $driver = DB::table('drivers')->where("is_active","=","1")
                                         ->whereNull('deleted_at')
                                        ->get();
          return view('admin.notifications.add' , compact('driver'));
    }
    public function sendotp(){
      $ch = curl_init();
      $API_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI5OWY5ZGM1MC04MGYyLTExZTgtYjBiZC0zZDZkOWUxYWQwMzEiLCJzdWIiOiJTSE9VVE9VVF9BUElfVVNFUiIsImlhdCI6MTUzMDg2NDAwOCwiZXhwIjoxODQ2NDgzMjA4LCJzY29wZXMiOnsiYWN0aXZpdGllcyI6WyJyZWFkIiwid3JpdGUiXSwibWVzc2FnZXMiOlsicmVhZCIsIndyaXRlIl0sImNvbnRhY3RzIjpbInJlYWQiLCJ3cml0ZSJdfSwic29fdXNlcl9pZCI6IjIwMDYiLCJzb191c2VyX3JvbGUiOiJ1c2VyIiwic29fcHJvZmlsZSI6ImFsbCIsInNvX3VzZXJfbmFtZSI6IiIsInNvX2FwaWtleSI6Im5vbmUifQ.aP2Vcy2WDlaPyDz4eMjsO0fG5iv2q1pZztpjbvaOX4g";
      $params = array( 
        'source' => 'SnapRides', // Sender ID
        'destination' => "94779958908", // Receiver
        'transport'=>"sms",
        'content' => array(
          'sms'=>"code is {{code}}"
        )  
      );
      $body = json_encode($params);
      curl_setopt($ch, CURLOPT_URL, "https://api.getshoutout.com/otpservice/send");
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
      curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
      curl_setopt($ch, CURLOPT_POST, 1);
      $headers = array();
      $headers[] = "Content-Type: application/json";
      $headers[] = "Accept: application/json";
      $headers[] = "Authorization: Apikey $API_KEY";
      curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
      $result = curl_exec($ch);
      if (curl_errno($ch)) {
        echo 'Error:' . curl_error($ch);
      }
      print_r($result);
      curl_close ($ch);


    }
    public function sendsms(Request $request){

        $subject   = $request->subject;
        $message   = $request->message;

        $API_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI5OWY5ZGM1MC04MGYyLTExZTgtYjBiZC0zZDZkOWUxYWQwMzEiLCJzdWIiOiJTSE9VVE9VVF9BUElfVVNFUiIsImlhdCI6MTUzMDg2NDAwOCwiZXhwIjoxODQ2NDgzMjA4LCJzY29wZXMiOnsiYWN0aXZpdGllcyI6WyJyZWFkIiwid3JpdGUiXSwibWVzc2FnZXMiOlsicmVhZCIsIndyaXRlIl0sImNvbnRhY3RzIjpbInJlYWQiLCJ3cml0ZSJdfSwic29fdXNlcl9pZCI6IjIwMDYiLCJzb191c2VyX3JvbGUiOiJ1c2VyIiwic29fcHJvZmlsZSI6ImFsbCIsInNvX3VzZXJfbmFtZSI6IiIsInNvX2FwaWtleSI6Im5vbmUifQ.aP2Vcy2WDlaPyDz4eMjsO0fG5iv2q1pZztpjbvaOX4g";
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $mobile_array=array('94779958908');   
        $params = array(
          'source' => 'SnapRides', // Sender ID
          'destinations' => $mobile_array, // Receiver
          'transports' => ['SMS'],
          'content' => array(
            'sms'=>$subject
          ) 
        );
 

        $body = json_encode($params);
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, "https://api.getshoutout.com/coreservice/messages");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
        curl_setopt($ch, CURLOPT_POST, 1);

        $headers = array();
        $headers[] = "Content-Type: application/json";
        $headers[] = "Accept: application/json";
        $headers[] = "Authorization: Apikey $API_KEY";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        print_r($result);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close ($ch);

         return redirect('send-sms')->with('msg' , 'sms successfully sent')->with('color' , 'success');
    }
    
    public function send_sms(Request $request){
       
        $subject   = $request->subject;
        
        $message   = $request->message;
        $driver   = $request->driver;
        $arr = array();
        
        foreach($driver as $val){
             $drivers =  DB::table('drivers')
              ->select('drivers.id' , 'drivers.mobile')
              ->where('drivers.id',"=",$val)    
              ->first();
             
             array_push($arr,$drivers->mobile);
        }
       
        $API_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI5OWY5ZGM1MC04MGYyLTExZTgtYjBiZC0zZDZkOWUxYWQwMzEiLCJzdWIiOiJTSE9VVE9VVF9BUElfVVNFUiIsImlhdCI6MTUzMDg2NDAwOCwiZXhwIjoxODQ2NDgzMjA4LCJzY29wZXMiOnsiYWN0aXZpdGllcyI6WyJyZWFkIiwid3JpdGUiXSwibWVzc2FnZXMiOlsicmVhZCIsIndyaXRlIl0sImNvbnRhY3RzIjpbInJlYWQiLCJ3cml0ZSJdfSwic29fdXNlcl9pZCI6IjIwMDYiLCJzb191c2VyX3JvbGUiOiJ1c2VyIiwic29fcHJvZmlsZSI6ImFsbCIsInNvX3VzZXJfbmFtZSI6IiIsInNvX2FwaWtleSI6Im5vbmUifQ.aP2Vcy2WDlaPyDz4eMjsO0fG5iv2q1pZztpjbvaOX4g";
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $mobile_array=$arr;   
       
        $params = array(
          'source' => 'SnapRides', // Sender ID
          'destinations' => $mobile_array, // Receiver
          'transports' => ['SMS'],
          'content' => array(
            'sms'=>$subject
          ) 
        );
 

        $body = json_encode($params);
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, "https://api.getshoutout.com/coreservice/messages");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
        curl_setopt($ch, CURLOPT_POST, 1);

        $headers = array();
        $headers[] = "Content-Type: application/json";
        $headers[] = "Accept: application/json";
        $headers[] = "Authorization: Apikey $API_KEY";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        print_r($result);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close ($ch);

         return redirect('send-sms')->with('msg' , 'sms successfully sent')->with('color' , 'success');
    }
 

 
    
    public function getUsers(Request $request){

         $userType = $request->userType;
         $cities   = $request->cities;
         
         if($userType == 'driver'){
            $table = 'drivers';
         }else{
            $table = 'customers';
         }

         $users = DB::table($table)->select($table.'.id' , $table.'.name')
                                     ->where(function($query) use ($cities,$table) {
                                        if (!empty($cities)) {
                                           $query -> whereIn($table.'.city' ,$cities );
                                        }
                                     })
                                    ->get();
                                    
          $html = '';
          foreach ($users as $user) {
                $html .= '<option value='.$user->id.'>'.$user->name.'</option>';
          }
          echo $html;
    }
    
    public function store(Request $request){    
        $type = $request->toElement;
        $to = 'driverapp';
        $drivers = explode(',',$request->driver); 
        $user = $request->user; 
        $toElement = $request->toElement;
        $user = explode(',', $user);
        $message = $request->message;
        $subject = $request->subject;
        if($toElement=='driver'){
          $users = DB::table('drivers')->whereIn('id',$drivers )->get();
           
          $to = 'driverapp';
        }else if($toElement=='rider'){
          $users = DB::table('customers')->whereIn('id',$user )->get();
           $to = 'customerapp';
        }

        //$to=array('cblStpzaXTI:APA91bE3oElAgP7tNh1pLDsx40fHeD42D64PomwAR2Xci0ZcH0A3wv4RPruu5uq_zdRyn2lD_sMGQybwoJ_2k_IXtBFuLv0ooJz_zW_4qjUYH8i9_WtRSCbhfkoADJJYpvK93eSFJqlSMO2k1YwxUwYL13G1pxnOhw');
        $token='';

        foreach ($users as $key => $value) {
          if($value->device_token!=''){
                if($value->type==1){
                     $msg = array
                (
                'body' => $request->message,
                'title' => $subject,
                'icon' => 'myicon', /* Default Icon */
                'sound' => 'mySound'/* Default sound */
            );
                    $fields = array
                      (
                        'to'        => $value->device_token,
                        'notification'  => $msg,
                        'data'=>array('message'=>$request->message)
                    );  
                   
                   $this->fcmNotification($request->message, $fields, $to);
                }
                else{
                     $environment = "dev";
                     $environment = $request->header('environment'); // type of server using for iosnotification
                     if ($environment == null || $environment == '') {
                        $environment = "adhoc";
                     }
                     
                     $msg = array
                (
                'body' => $request->message,
                'title' => $subject,
                'icon' => 'myicon', /* Default Icon */
                'sound' => 'mySound'/* Default sound */
            );
                      $fields = array
                      (
                        'to'        => $value->device_token,
                        'notification'  => $msg,
                        'data'=>array('message'=>$request->message)
                    ); 
                     
                     $this->iosNotification($request->message, $fields, $to, $environment);
                }
          }
        }
       
        return redirect('send-notification')->with('msg' , 'successfully sent notification')->with('color' , 'success');
    }


   
    public function fcmNotification($msg, $fields, $to) {
        #API access key from Google API's Console
        /*  define( 'API_ACCESS_KEY', 'YOUR-SERVER-API-ACCESS-KEY-GOES-HERE' ); */
        //$fields["timeToLive"]=60;

        if ($to == 'driverapp') {
            //define('API_ACCESS_KEY','');
            // $key = "AAAAuIvKrEM:APA91bEix38_XugJjJfB3HregtLFzg0xhMJ_0-PMvIzTca7SrdNFs2eBcKYAdq0lY0oiDKmW0ccDoMCsp-nNhkVT90kwJMpAxs2kCmjlcZebEK4VhQK9Qi1-aqIJcxpAc9dcIEebamsEZG5rUHdW1LIk-MDcBF5Xqg";

            $key = "AAAA9ySehbk:APA91bFNiawcfu4KAL81fn8_836pEJ0RVvtIvaUwISStvM0lSDX7HS8__KKgI4Dnr_SbAArC1SSHAVhqjhAmsriCA3r94Wl1mc7IQw-gu9bDFdInk7_FfoQ0Oh4YVCxbw30oYgY3_HSM";


        } else if ($to == 'customerapp') {
            //customer app
            // $key = "AAAAk5ejpl4:APA91bHrLr9l6rKfceoEK_lECAh3rkyQhFN9MthlN2u7EissI5UIt3UuWD3wf6bXyJBmt6OUfE32vTr67NT_nZmVXsKPDiEinXessPsLdM6W3mYj6aMi6yCj7aRjBbXuQLGfHkEdQX6iVKGUA5Xb5cZtRLOrBQhIlA";

          $key = "AAAAji3qdWk:APA91bGq1dWOjVHLiDZt9JXOorasxGtuAKyT49yjyHc0ShlNuptQ7KUNuf4k15dtWPg_ePXvgNCJdPGL6j7owl3qKROehPzbSXkInpGS_bTnNOMGy4yJYaH4jjQNgINgr9BJnnT7c8Uk";
        }
        //define('API_ACCESS_KEY',$key);  
        $headers = array
            (
            'Authorization: key=' . $key,
            'Content-Type: application/json'
        );
        #Send Reponse To FireBase Server    
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, 'https://fcm.googleapis.com/fcm/send');
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));
        $result = curl_exec($ch);
        curl_close($ch);
         //print_r($result);die;
        #Echo Result Of FireBase Server
    }

    
    public function iosNotification($msg, $fields, $app, $environment) {

        //$fields['to']='ac2447286e2aa2f1f2e1d98d3d5dffb00b2630a3417221609cc8aaf3f86c91a4';
        $deviceToken = $fields['to'];
        // Put your private key's passphrase here:
        $passphrase = '';

        $message = $msg;
        // Put your alert message here:
        //$message = 'tttttMy first push notification Amit! This is holi offer this is holi offer This is holi offer this is holi offer This is holi offer this is holi offer This is holi offer this is holi offer';
        //echo $path = base_url().'uploads/Woosah_Apns.pem';die;

        if ($environment == 'dev') {
            $url = 'ssl://gateway.sandbox.push.apple.com:2195';
            $customer = 'Admin/CertificatesDevelopment.pem';
            $driver = 'Admin/CertificatesDriverDevelopment.pem';
        } else { // production 
            $url = 'ssl://gateway.push.apple.com:2195';
            $customer = 'Admin/CertificatesCustomerProduction.pem';
            $driver = 'Admin/CertificatesDriverProduction.pem';
        }



        if ($app == "customerapp") {
            // $path = 'Admin/CertificatesDevelopment.pem';
            //$path = 'Admin/CertificatesCustomerProduction.pem';
            $path = $customer;
        } elseif ($app == "driverapp") {
            //$path = 'Admin/CertificatesDriverDevelopment.pem';
            // $path = 'Admin/CertificatesDriverProduction.pem';
            $path = $driver;
        }
        
        
        

        //echo IOS_PEM.'CertificatesProduction.pem';
        //echo $base_url.'/pushnotiication_PEmfile/Certificates.pem';die;

        $ctx = stream_context_create();
        stream_context_set_option($ctx, 'ssl', 'local_cert', $path);
        //stream_context_set_option($ctx, 'ssl', '', $passphrase);
        stream_context_set_option($ctx, 'ssl', 'passphrase', '');
        // Open a connection to the APNS server


        $fp = stream_socket_client($url, $err, $errstr, 60, STREAM_CLIENT_CONNECT | STREAM_CLIENT_PERSISTENT, $ctx);
        //ssl://gateway.sandbox.push.apple.com:2195
        // $url = "ssl://gateway.push.apple.com:2195";
        // $fp = stream_socket_client($url, $err, $errstr, 60, STREAM_CLIENT_CONNECT | STREAM_CLIENT_PERSISTENT, $ctx);
        if (!$fp)
            exit("Failed to connect: $err $errstr" . PHP_EOL);

        //echo 'Connected to APNS' . PHP_EOL;
        // Create the payload body
        $body['aps'] = array(
            'alert' => $message,
            'badge' => 1, 'sound' => 'default', "fields" => $fields
        );
        //apns-expiration to set exipiration
        // Encode the payload as JSON
        $payload = json_encode($body);
        // Build the binary notification
        //$msg = chr(0) . pack('n', 32) . pack('H*', $deviceToken) . pack('n', strlen($payload)) . $payload;
        $msg = chr(0) . pack('n', 32) . pack('H*', $deviceToken) . pack('n', strlen($payload)) . $payload;

        // Send it to the server
        $result = fwrite($fp, $msg, strlen($msg));
        fclose($fp);
        
    }
 
}

